/**
 * @fileOverview Stream generation.
 */
static define;
define(['nu/stream'],
function(stream) {
"use strict";

var curry = \f, ... -> f.bind.apply(f, arguments);

/* Gen
 ******************************************************************************/
/**
 * Repeat 'x' 'times' times.
 * 
 * @param {Number} times Number of times to repeat 'x'.
 * @param x Item to repeat.
 * 
 * @return Lazy stream of 'x' repeated 'times' times.
 */
var repeat = \times, x ->
    (times <= 0 ?
        stream.end :
        stream.memoStream(x, curry(repeat, times - 1, x)));

/**
 * Generate a stream of numbers in a given range.
 * 
 * @param lower Lower bound of range.
 * @param [upper] Upper bound of range.
 * @param [step] Number to step by in range. May be negative.
 * 
 * @return Lazy stream for range.
 */
var range = let
    rangeImpl = \lower, upper, step ->
        ((step > 0 ? upper <= lower : upper >= lower) ?
            stream.end :
            stream.memoStream(lower, curry(rangeImpl, lower + step, upper, step)))
in
    \lower, upper, step -> {
        var rangeLower = (isNaN(lower) ? Infinity : +lower),
            rangeStep = (isNaN(step) ? 1 : +step);
        return (isNaN(upper) ?
            rangeImpl(0, rangeLower, rangeStep) :
            rangeImpl(rangeLower, upper, rangeStep));
    };

/* Export
 ******************************************************************************/
return {
   'repeat': repeat,
   'range': range
};

});