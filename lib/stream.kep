/**
 * @fileOverview Core stream functionality.
 */
package (
    end
    NIL
    
    stream
    memoStream
    rec
    
    cons
    append
    appendz
    concat
    bind
    from
    
    first
    rest
    isEmpty
    isStream
    
    reverse
    foldl
    foldr
    reduce
    reduceRight
    
    zip
    zipWith
    indexed
    
    map
    filter
    
    forEach
    toArray)
{

var arrayReduce := Function.prototype.call.bind(Array.prototype.reduce);

var constant := \x -> \ -> x;

var flip := \f -> \x y -> f(y, x);

var memo := \f -> {
    var value;
    return \ -> {
        if (value === undefined)
            value = f();
        return value;
    };
};

/* Constants
 ******************************************************************************/
/**
 * The empty stream.
 */
NIL := end := null;

/* Stream
 ******************************************************************************/
/**
 * Create a new stream.
 *
 * @param val First element of the stream.
 * @param f Function that returns the rest of the stream given the first element.
 * 
 * @return A new stream.
 */
stream := \val f -> ({
    first: val,
    rest: f
});

/**
 * Create a new stream that memoizes rest results.
 */
memoStream := \val f ->
    stream(val, memo f);

/**
 * Create a self referential stream.
 * 
 * @param def Function that produces the stream Passed a function that,
 *    when invoked, returns the result of `def`. This must happen after `def` returns.
 */
rec := \def -> {
    var value := def \ -> { return value; };
    return value;
};

/* Primitive Operators
 ******************************************************************************/
/**
 * Get the first element of a given stream.
 * 
 * @param s Stream.
 */
first := (.first);

/**
 * Get the rest of a given stream, excluding the first element.
 * 
 * @param s Stream.
 */
rest := (.rest());

/**
 * Is a given stream empty?
 * 
 * @param s Stream.
 */
isEmpty := (=== NIL);

/**
 * Is a given object a stream?
 * 
 * Returns true for empty streams as well.
 * 
 * @param s Object to test.
 */
isStream := \s ->
    (  (s && s.rest && s.hasOwnProperty('first'))
    || isEmpty s);

/* Stream Construction
 ******************************************************************************/
/**
 * Create a new stream from a value and existing stream.
 * 
 * @param val First element of the stream.
 * @param s Rest of the stream.
 */
cons := \val s -> 
    stream(val, constant s);

/**
 * Joins two streams into a new stream.
 * 
 * @param s1 Stream.
 * @param f Function returning second stream.
 */
appendz := \s1 f ->
    ?isEmpty s1
        :f()
        :memoStream(first s1, \-> appendz(rest s1, f));

/**
 * Joins multiple streams into a new stream.
 */
append := let
    reducer := \s1 s2 -> appendz(s1, constant s2)
in
    \-streams(...)-> arrayReduce(streams, reducer, NIL);

/**
 * Joins a stream of streams into a new stream
 */
concat := \s ->
    ?isEmpty s
        :s
        :appendz(first s, \-> concat(rest s));

/**
 * Create a new stream from an array like object.
 * 
 * @param arr Array like object object.
 */
from := let
    fromImpl := \arr i len ->
        ?i >= len
            :end
            :memoStream(arr.(i), \-> fromImpl(arr, i + 1, len))
in
    \arr#{length} -> fromImpl(arr, 0, length);

/* 
 ******************************************************************************/
/**
 * Combine two streams using `f`
 * 
 * Takes as many elements as the shorter of the two contains.
 * 
 * @param f Binary function to combine elements
 * @param l1 Stream
 * @param l2 Stream
 */
zipWith := \f l1 l2 ->
    ?isEmpty l1 || isEmpty l2
        :NIL
        :memoStream(
            f(first l1, first l2),
            zipWith@(f, rest l1, rest l2));
    
/**
 * Combine two streams into a stream of pairs.
 * 
 * Takes as many elements as the shorter of the two contains.
 * 
 * @param l1 Stream
 * @param l2 Stream
 */
zip := zipWith @ \x y -> [x, y];

/**
 * Create a stream of pairs of index and value.
 */
indexed := let
    count := \n -> stream(n, \-> count(n + 1))
in
    zip@(count 0);

/**
 * Fold a stream left-to-right.
 * 
 * @param {function(accumulated, current)} f
 * @param z Initial value
 * @param s Stream
 * 
 * @return Result value
 */
foldl := \f z s -> {
    var r = z;
    for (var head = s; !isEmpty head; head = rest head)
       r = f(r, first head);
    return r;
};

/**
 * Reverse a stream.
 * 
 * Must be finite.
 * 
 * @param s Stream.
 */
reverse := foldl@(flip cons, NIL);

/**
 * Fold a stream right-to-left.
 *
 * @param {function(accumulated, current)} f 
 * @param z Initial value
 * @param s Stream
 * 
 * @return Result value
 */
foldr := \f z s ->
    foldl(f, z, reverse s);

/**
 * Fold a non-empty stream left-to-right without an initial value.
 * 
 * @param {function(accumulated, current)} f
 * @param s Stream
 * 
 * @return Result value.
 */
reduce := \f s ->
    foldl(f, first s, rest s);

/**
 * Fold a non-empty stream right-to-left without an initial value.
 * 
 * @param {function(accumulated, current)} f 
 * @param s Stream
 * 
 * @return Result value.
 */
reduceRight := \f s ->
    reduce(f, reverse s);

/* 
 ******************************************************************************/
/**
 * Create a new stream of mapped values from an existing stream.
 * 
 * @param {function(value)} f Function that transforms source values and
 *     returns the transformed value.
 * @param source Stream to map.
 */
map := \f s ->
    ?isEmpty s
        :s
        :memoStream(f(first s), \-> map(f, rest s));

/**
 * Create a new stream of filtered values from an existing stream.
 * 
 * @param {function(value): boolean} predicate Predicate function used to filter
 *     stream. 
 * * @param s Stream being filtered.
 */
filter := \pred s -> {
    for (var head = s; !isEmpty head; head = rest head)
    with x := first head in {
        if (pred x)
            return memoStream(x, \-> filter(pred, rest head));
    }
    return NIL;
};

/**
 * Apply 'f' to stream 's' and join results into a new stream.
 */
bind := map \>> concat;

/* 
 ******************************************************************************/
/**
 * Iterate over a stream in order.
 *
 * @param {function(value): *} f Function invoked on each element of 's'
 * @param s Stream
 */
forEach := \f s -> {
    for (var head = s; !isEmpty head; head = rest head)
       f(first head);
};

/**
 * Convert a finite stream to an array.
 *
 * @param s Stream.
 */
toArray := let
    builder = \p c -> {
        p.push c;
        return p;
    }
in
    \s -> foldl(builder, [], s);


}