/**
 * @fileOverview Core stream functionality.
 */
package (
    end,

    stream,
    memoStream,
    
    cons,
    append,
    appendz,
    concat,
    from,

    first,
    rest,
    isEmpty,
    isStream,
    
    forEach,
    foldl,
    foldr,
    toArray,
    
    map,
    filter,
    
    bind)
{
var arrayReduce = Function.prototype.call.bind(Array.prototype.reduce);

var curry = \f, ... -> f.bind.apply(f, arguments);

var constant = \x -> \() -> x;

var memo = \f -> {
    var value;
    return \... -> {
        if (value === undefined)
            value = f.apply(this, arguments);
        return value;
    };
};

/* Constants
 ******************************************************************************/
/**
 * The empty stream.
 */
end = null;

/* Stream
 ******************************************************************************/
/**
 * Create a new stream.
 *
 * @param val First element of the stream.
 * @param f Function that returns the rest of the stream given the first element.
 * 
 * @return A new stream.
 */
stream = \val, f -> ({
    'first': val,
    'rest': f
});

/**
 * Create a new stream that memoizes rest results.
 */
memoStream = \val, f ->
    stream(val, memo(f));

/* Primitive Operators
 ******************************************************************************/
/**
 * Get the first element of a given stream.
 * 
 * @param s Stream.
 * 
 * @return First element of 's'.
 */
first = \s -> s.first;

/**
 * Get the rest of a given stream, excluding the first element.
 * 
 * @param s Stream.
 * 
 * @return Stream for rest of 's'.
 */
rest = \s -> s.rest(first(s));

/**
 * Is a given stream empty.
 * 
 * @param s Stream.
 *
 *@return Is 's' empty.
 */
isEmpty = \s -> (s === end);

/**
 * Is a given object a stream?
 * 
 * Returns true for empty streams as well.
 * 
 * @param s Object to test.
 * 
 * @return Is 's' a valid stream.
 */
isStream = \s ->
    ((s && s.hasOwnProperty('first') && s.hasOwnProperty('rest')) || s === end);


/* Stream Construction
 ******************************************************************************/
/**
 * Create a new stream from a value and existing stream.
 * 
 * @param val First element of the stream.
 * @param s Rest of the stream.
 * 
 * @return A new stream.
 */
cons = \val, s -> 
    stream(val, constant(s));

/**
 * Joins two streams into a new stream.
 * 
 * @param s1 Stream.
 * @param f Function returning second stream.
 * 
 * @return Stream of two joined streams.
 */
appendz = \s1, f ->
    (isEmpty(s1) ?
        f() :
        memoStream(first(s1), curry(appendz, rest(s1), f)));

/**
 * Joins multiple streams into a new stream.
 * 
 * @return Stream of joined streams.
 */
append = let
    reducer = \s1, s2 -> appendz(s1, constant(s2))
in
    \... -> arrayReduce(arguments, reducer, end);

/**
 * Joins a stream of streams into a new stream
 */
concat = \s ->
    (isEmpty(s) ?
        s :
        appendz(first(s), curry(concat, rest(s))));

/**
 * Create a new stream from an array like object.
 * 
 * @param arr Array like object object.
 * 
 * @return Stream of enumerable values from enumerable object.
 */
from = let
    fromImpl = \arr, i, len ->
        (i >= len ?
            end : 
            memoStream(arr[i], curry(fromImpl, arr, i + 1, len)))
    
in
    \arr{'length': len} -> fromImpl(arr, 0, len);


/* 
 ******************************************************************************/
/**
 * Iterate over a stream in order.
 *
 * @param {function(value, index): *} f Function to call each element of 's'.
 * @param s Stream to iterate over.
 */
forEach = \f, s -> {
    for (var head = s, i = 0; !isEmpty(head); head = rest(head)) {
       f(first(head), i);
       i = i + 1;
    }
};

/**
 * Left fold on a stream.
 * 
 * @param {function(previous, current, index)} f Function that reduces 
 *     's'.
 * @param z Initial value used for fold.
 * @param s Stream being reduced.
 * 
 * @return Result of reduction.
 */
foldl = \f, z, s -> {
    var r = z;
    forEach(\x, i -> { r = f(r, x, i); return r; }, s);
    return r;
};

/**
 * Right fold on a stream.
 *
 * @param {function(previous, current, index)} f Function that reduces 's'.
 * @param z Initial value used for fold.
 * @param s Stream being reduced.
 * 
 * @return Result of reduction.
 */
foldr = curry(function STREAM_FOLDR(i, f, z, s) {
    return (isEmpty(s) ?
        z :
        f(STREAM_FOLDR(i + 1, f, z, rest(s)), first(s), i));
}, 0);

/**
 * Convert a finite stream to an array.
 *
 * @param s Stream.
 *
 * @return Array created from stream..
 */
toArray = let 
    builder = \p, c -> {
        p.push(c);
        return p;
    }
in
    \s -> foldl(builder, [], s);

/* 
 ******************************************************************************/
/**
 * Create a new stream of mapped values from an existing stream.
 * 
 * @param {function(value)} f Function that transforms source values and
 *     returns the transformed value.
 * @param source Stream to map.
 * 
 * @return Stream of mapped values.
 */
map = curry(function STREAM_MAP(i, f, s) {
    return (isEmpty(s) ?
        s :
        memoStream(f(first(s), i), curry(STREAM_MAP, i + 1, f, rest(s))));
}, 0);

/**
 * Create a new stream of filtered values from an existing stream.
 * 
 * @param {function(value, index): boolean} predicate Predicate function used to filter
 *     stream. Takes the value to test as well as its index in
 *     the unfiltered source.
 * * @param s Stream being filtered.
 * 
 * @return New stream from filtered 's'.
 */
filter = curry(function STREAM_FILTER(i, pred, s) {
    var head = s;
    for (var index = i; !isEmpty(head); head = rest(head)) {
        var x = first(head);
        if (pred(x, index))
            return memoStream(x, curry(STREAM_FILTER, index + 1, pred, rest(head)));
        index = index + 1;
    }
    return head;
}, 0);

/* 
 ******************************************************************************/
/**
 * Apply 'f' to stream 's' and join results into a new stream.
 */
bind = \f, s ->
     concat(map(f, s));

};