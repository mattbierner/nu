/**
 * @fileOverview Stream quantifiers.
 */
package (
    any,
    every)
with
    import 'nu/stream' {isEmpty, first, rest}
in {
/**
 * Tests a stream against a predicate and returns if the predicate is satisfied
 * for any element.
 * 
 * Succeeds fast. May stall on an infinite stream if predicate is never satisfied.
 * 
 * @param {function(value, index): boolean} pred Predicate function that tests
 *     values from the stream.
 * * @param s Stream to test.
 * 
 * @return Was the predicate satisfied for any element?
 */
any = \pred, s -> {
    var i = 0, current = s;
    while (!isEmpty(current)) {
        if (pred(first(current), i))
            return true;
        i = i + 1;
        current = rest(current);
    }
    return false;
};

/**
 * Tests a stream against a predicate and returns if the predicate is satisfied
 * for all element.
 * 
 * Fails fast. May stall on an infinite stream if predicate is always satisfied.
 * 
 * @param {function(value, index): boolean} pred Predicate function that tests
 *     values from the stream.
 * * @param s Stream to test.
 * 
 * @return Was the predicate satisfied for all elements?
 */
every = \pred, s -> {
    var i = 0, current = s;
    while (!isEmpty(current)) {
        if (!pred(first(current), i))
            return false;
        i = i + 1;
        current = rest(current);
    }
    return true;
};

}